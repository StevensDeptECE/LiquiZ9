{"quizspec":"dkruger.qspec", "name":"Number Theoretic"}
{"qt":"pcode", "name":"Integer math"}
int a1 = 25 / 4;      //a1=$6$
int a2 = 17 % 7;      //a2=$3$
int a3 = 7 % 17;      //a3=$7$
double a4 = 5.5+2*3;  //a4=$11.5$
int a5 = ++a4;        //a5=$12$
int a6 = a4++;        //a6=$12$
// a4 = $12.5$

{"qt":"pcode", "name":"size and memory layout"}
int a7 = sizeof(uint64_t); //a7=[a7]
  int a9 = sizeof(double);   //a9=[a9]

  class A {
    double x;
    char c;
  }; // In order to make access faster, on a 64-bit computer A is aligned to  [a10] bytes therefore the size of this one would be [a11]

{"qt":"pcode", "name":"Floating Point Computation"}
For each line write the answer that is computed.
If a whole number like 5, use 5.0 as the answer.
For infinity, use inf for NaN use nan (all lowercase)
double rec(int n) {
  if (n <= 3)
    return 2;
  return 2.0 * rec(n-2);
}
double b1 = 9 / 10;       //b1 = $0$
double b2 = (int)2.5 * 3; //b2 = $6$
double b3 = int(2.5) * 3; //b3 = $6$
double b4 = int(2.5 * 3); //b4 = $7$
double Z = 0.0;
double b5 = -1.0 / Z;     //b5 = $-inf$
double b6 = 5.0 / b5;     //b6 = $0$
double b7 = b5 + b6;      //b7 = $-inf$
double b10 = rec(5);      //b10=[b10]

{"qt":"pcode", "name":"Rules of Inf and NaN"}
1.0 / 0.0 = $inf$
-1.0 / 0.0 = $-inf$
0.0 / 0.0 = $nan$
sqrt(1.0 / 0.0) = $inf$
sqrt(-1.0) = $nan$
2.0 / 0. = $inf$
cos(1.0 / 0.0) = $inf$

{"qt":"pcode", "name":"true or false?"}
1.0 / 0.0 == -1.0 / 0.0 ? $false$
2.0 / 0.0 == 1.0 / 0.0 + 1 ? $true$
0.0 / 0.0 == sqrt(-1.0) ? $false$
sqrt(-1.0) != sqrt(-1.0) ? $false$

{"qt":"pcode", "name":"Memory Alignment"}
class A {
  char y;
  double x;
  char w;
  uint64_t z;
  uint32_t a;
  char c;
};
//State the size of the above class in bytes: $40$
//Reorder for greater packing efficiency and state the size: $24$


{"qt":"pcode", "name":"Follow The Code"}
class A {
public:
  A(int x) { cout << 'A' << x; }
  ~A()     { cout << "~A"; } 
};
class B : public A {
private:
  int x;
public:
  B(int x) : A(x+1), x(x) { cout << "B" << x; }
  ~B()                    { cout << "~B"; }
};
int main() {
  B b1(2); // the output is $out$
}